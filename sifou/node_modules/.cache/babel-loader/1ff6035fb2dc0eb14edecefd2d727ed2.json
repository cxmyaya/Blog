{"remainingRequest":"E:\\丫丫\\web\\CODE\\blog\\sifou\\node_modules\\babel-loader\\lib\\index.js!E:\\丫丫\\web\\CODE\\blog\\sifou\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\丫丫\\web\\CODE\\blog\\sifou\\src\\service\\BlogService.js","dependencies":[{"path":"E:\\丫丫\\web\\CODE\\blog\\sifou\\src\\service\\BlogService.js","mtime":1612144310210},{"path":"E:\\丫丫\\web\\CODE\\blog\\sifou\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\丫丫\\web\\CODE\\blog\\sifou\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\丫丫\\web\\CODE\\blog\\sifou\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["E:/丫丫/web/CODE/blog/sifou/src/service/BlogService.js"],"names":["axios","defaultConfig","BlogService","blogData","post","baseApiUrl","params","get","data"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,+BAAlB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;;IAEMC,W;;;;;;;AAEJ;;iGACiBC,Q;;;;;iDACRH,KAAK,CAACI,IAAN,WAAcH,aAAa,CAACI,UAA5B,mBAAqDF,QAArD,C;;;;;;;;;;;;;;;QAGT;;;;;qGACoBG,M;;;;;kDACXN,KAAK,CAACO,GAAN,WAAaN,aAAa,CAACI,UAA3B,0BAA2D;AAChEC,kBAAAA,MAAM,EAANA;AADgE,iBAA3D,C;;;;;;;;;;;;;;;QAKT;;;;;iGACgBA,M;;;;;kDACPN,KAAK,CAACO,GAAN,WAAaN,aAAa,CAACI,UAA3B,sBAAuD;AAC5DC,kBAAAA,MAAM,EAANA;AAD4D,iBAAvD,C;;;;;;;;;;;;;;;QAKT;;;;;iGACgBA,M;;;;;kDACPN,KAAK,CAACO,GAAN,WAAaN,aAAa,CAACI,UAA3B,sBAAuD;AAC5DC,kBAAAA,MAAM,EAANA;AAD4D,iBAAvD,C;;;;;;;;;;;;;;;QAKT;;;;;mGACkBA,M;;;;;kDACTN,KAAK,CAACO,GAAN,WAAaN,aAAa,CAACI,UAA3B,wBAAyD;AAC9DC,kBAAAA,MAAM,EAANA;AAD8D,iBAAzD,C;;;;;;;;;;;;;;;QAKT;;;;;yGACwBE,I;;;;;kDACfR,KAAK,CAACI,IAAN,WAAcH,aAAa,CAACI,UAA5B,2BAA6DG,IAA7D,C;;;;;;;;;;;;;;;QAGT;;;;;6GAC4BF,M;;;;;kDACnBN,KAAK,CAACO,GAAN,WAAaN,aAAa,CAACI,UAA3B,+BAAgE;AAACC,kBAAAA,MAAM,EAANA;AAAD,iBAAhE,C;;;;;;;;;;;;;;;QAGR;;;;;kGACiBA,M;;;;;kDACTN,KAAK,CAACO,GAAN,WAAaN,aAAa,CAACI,UAA3B,uBAAwD;AAACC,kBAAAA,MAAM,EAANA;AAAD,iBAAxD,C;;;;;;;;;;;;;;;QAGT;;;;;oGACmBE,I;;;;;kDACVR,KAAK,CAACI,IAAN,WAAcH,aAAa,CAACI,UAA5B,yBAA2DG,IAA3D,C;;;;;;;;;;;;;;;QAGR;;;;;mGACiBA,I;;;;;mDACTR,KAAK,CAACI,IAAN,WAAcH,aAAa,CAACI,UAA5B,uBAAyDG,IAAzD,C;;;;;;;;;;;;;;;;;;;;;AAIX,eAAe,IAAIN,WAAJ,EAAf","sourcesContent":["import axios from './config/axios.default.config'\r\nimport defaultConfig from '@/config/config.default'\r\n\r\nclass BlogService{\r\n\r\n  //写文章\r\n  async createBlog(blogData){\r\n    return axios.post(`${defaultConfig.baseApiUrl}/blog/create`,blogData)\r\n  }\r\n\r\n  //博客列表查询\r\n  async getPublicBlog(params){\r\n    return axios.get(`${defaultConfig.baseApiUrl}/blog/getPublicBlog`,{\r\n      params\r\n    })\r\n  }\r\n\r\n  //获取我的博客\r\n  async getMyBlog(params){\r\n    return axios.get(`${defaultConfig.baseApiUrl}/blog/getMyBlog`,{\r\n      params\r\n    })\r\n  }\r\n\r\n  //获取我点赞的博客\r\n  async getMyLike(params){\r\n    return axios.get(`${defaultConfig.baseApiUrl}/blog/getMyLike`,{\r\n      params\r\n    })\r\n  }\r\n\r\n  //根据博客 id 获取博客详情\r\n  async getBlogById(params){\r\n    return axios.get(`${defaultConfig.baseApiUrl}/blog/getBlogById`,{\r\n      params\r\n    })\r\n  }\r\n\r\n  //创建评论\r\n  async createBlogComment(data){\r\n    return axios.post(`${defaultConfig.baseApiUrl}/blog/comment/create`,data)\r\n  }\r\n\r\n  //获取未审核的文章\r\n  async getUnapprovedBlogList(params){\r\n    return axios.get(`${defaultConfig.baseApiUrl}/blog/getUnapprovedBlogs`,{params})\r\n  }\r\n\r\n   //获取所有文章\r\n   async getAllBlog(params){\r\n    return axios.get(`${defaultConfig.baseApiUrl}/blog/getAllBlog`,{params})\r\n  }\r\n\r\n  //审核通过文章\r\n  async approvedBlog(data){\r\n    return axios.post(`${defaultConfig.baseApiUrl}/blog/approvedBlog`,data)\r\n  }\r\n\r\n   //删除文章\r\n   async deleteBlog(data){\r\n    return axios.post(`${defaultConfig.baseApiUrl}/blog/deleteBlog`,data)\r\n  }\r\n}\r\n\r\nexport default new BlogService()"]}]}